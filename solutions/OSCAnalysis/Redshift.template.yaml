AWSTemplateFormatVersion: '2010-09-09'
Description: Redshit cluster
Parameters:

  DatalakeStack:
    Type: String
    Description: Datalake buckets stack name

  DatabaseName:
    Description: Redshift database name
    Type: String

  DatabasePort:
    Default: '5439'
    Description: The port that Amazon Redshift will listen on, which will be allowed
      through the security group.
    Type: String

  NodeType:
    AllowedValues:
      - dw1.xlarge
      - dw1.8xlarge
      - dw2.large
      - dw2.8xlarge
      - dc1.large
      - dc1.8xlarge
      - dc2.large
      - dc2.8xlarge
      - ds1.xlarge
      - ds1.8xlarge
      - ds2.xlarge
      - ds2.8xlarge
    ConstraintDescription: must be a valid RedShift node type.
    Default: dc2.large
    Description: The node type to be provisioned for the redshift cluster
    Type: String

  NumberOfNodes:
    Default: '1'
    Description: The number of compute nodes in the redshift cluster.
    Type: Number

  PubliclyAccessible:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Indicates whether the cluster can be accessed from a public network.
    Type: String

  RedshiftInboundCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Description: CIDR block that gets access to Redshift
    Type: String

  RedshiftPassword:
    Description: The password that is associated with the master user account for
      the cluster that is being created.
    NoEcho: 'true'
    Type: String

  RedshiftUsername:
    Description: The user name that is associated with the master user account for
      the cluster that is being created
    Type: String

  SubnetId1:
    Description: Redshift subnet id 1.
    Type: AWS::EC2::Subnet::Id

  SubnetId2:
    Description: Redshift subnet id 2.
    Type: AWS::EC2::Subnet::Id

  VpcId:
    Description: VPC id.
    Type: AWS::EC2::VPC::Id

Mappings:

  IpRange:
    us-east-2:
      Quicksight: 52.15.247.160/27
    us-east-1:
      Quicksight: 52.23.63.224/27
    us-west-2:
      Quicksight: 54.70.204.128/27
    eu-west-1:
      Quicksight: 52.210.255.224/27
    ap-southeast-1:
      Quicksight: 52.210.255.224/27
    ap-southeast-2:
      Quicksight: 54.153.249.96/27


Conditions:
  IsMultiNodeCluster: !Not
    - !Equals
      - !Ref 'NumberOfNodes'
      - '1'
  IsPublic: !Equals
    - !Ref 'PubliclyAccessible'
    - 'true'

Resources:

  RedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - Fn::ImportValue:
                      !Sub ${DatalakeStack}:CuratedBucketArn
                  - !Join
                    - /
                    - - Fn::ImportValue:
                          !Sub ${DatalakeStack}:CuratedBucketArn
                      - '*'
                  - Fn::ImportValue:
                      !Sub ${DatalakeStack}:StagingBucketArn
                  - !Join
                    - /
                    - - Fn::ImportValue:
                          !Sub ${DatalakeStack}:StagingBucketArn
                      - '*'


  RedshiftCluster:
    Properties:
      ClusterSubnetGroupName: !Ref 'RedshiftClusterSubnetGroup'
      ClusterType: !If
        - IsMultiNodeCluster
        - multi-node
        - single-node
      DBName: !Ref 'DatabaseName'
      IamRoles:
        - !GetAtt RedshiftRole.Arn
      MasterUserPassword: !Ref 'RedshiftPassword'
      MasterUsername: !Ref 'RedshiftUsername'
      NodeType: !Ref 'NodeType'
      NumberOfNodes: !If
        - IsMultiNodeCluster
        - !Ref 'NumberOfNodes'
        - !Ref 'AWS::NoValue'
      Port: !Ref 'DatabasePort'
      PubliclyAccessible: !If
        - IsPublic
        - 'true'
        - !Ref 'AWS::NoValue'
      VpcSecurityGroupIds:
        - !Ref RedshiftSecurityGroup
        - !Ref QuicksightAccessSecurityGroup
    Type: AWS::Redshift::Cluster

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds:
        - !Ref 'SubnetId1'
        - !Ref 'SubnetId2'


  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable JDBC port
      SecurityGroupIngress:
        - CidrIp: !Ref 'RedshiftInboundCIDR'
          FromPort: !Ref 'DatabasePort'
          IpProtocol: tcp
          ToPort: !Ref 'DatabasePort'
        - CidrIp:
            !FindInMap
              - IpRange
              - !Ref 'AWS::Region'
              - Quicksight
          FromPort: !Ref 'DatabasePort'
          IpProtocol: tcp
          ToPort: !Ref 'DatabasePort'
      VpcId: !Ref 'VpcId'

  QuicksightAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable quicksight access.
      SecurityGroupIngress:
        - CidrIp:
            !FindInMap
              - IpRange
              - !Ref 'AWS::Region'
              - Quicksight
          FromPort: !Ref 'DatabasePort'
          IpProtocol: tcp
          ToPort: !Ref 'DatabasePort'
      VpcId: !Ref 'VpcId'



Outputs:

  ClusterRoleArn:
    Description: Cluster role
    Value: !GetAtt RedshiftRole.Arn

  ConnectionURL:
    Description: Cluster endpoint
    Value: !Join
      - ''
      - - jdbc:redshift://
        - !GetAtt 'RedshiftCluster.Endpoint.Address'
        - ':'
        - !GetAtt 'RedshiftCluster.Endpoint.Port'
        - /
        - !Ref 'DatabaseName'
