AWSTemplateFormatVersion: "2010-09-09"
Description: Realtime data analysis

Parameters:

  KmsKeyArn:
    Type: String
    Description: KMS key ARN to encrypt data on rest.

  IngestStreamArn:
    Type: String
    Description: Firehose ingest stream ARN

  BucketArn:
    Type: String
    Description: Storage bucket ARN

  NodesOutputPrefix:
    Description: S3 prefix node output data
    Type: String

  ElasticSearchAccessLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: Limit access to public elastic search cluster to specified
      IP range
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:

  # === Kinesis Analytics Application  ===

  AnalyticsAppInputRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AnalyticsAppInputPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ReadInputFirehose
                Effect: Allow
                Action:
                 - "firehose:DescribeDeliveryStream"
                 - "firehose:Get*"
                Resource:
                  - !Ref IngestStreamArn

  SteamingAnalyticsApp:
    Type: "AWS::KinesisAnalytics::Application"
    Properties:
      Inputs:
        - NamePrefix: "OSC"
          KinesisFirehoseInput:
            ResourceARN: !Ref IngestStreamArn
            RoleARN: !GetAtt AnalyticsAppInputRole.Arn
          InputSchema:
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordColumns:
              - Name: change
                SqlType: "VARCHAR(16)"
                Mapping: "$.change"
              - Name: feature
                SqlType: "VARCHAR(16)"
                Mapping: "$.feature"
              - Name: feature_id
                SqlType: "BIGINT"
                Mapping: "$.id"
              - Name: feature_version
                SqlType: "BIGINT"
                Mapping: "$.version"
              - Name: user_id
                SqlType: "BIGINT"
                Mapping: "$.uid"
              - Name: user_name
                SqlType: "VARCHAR(128)"
                Mapping: "$.user"
              - Name: changeset_id
                SqlType: "BIGINT"
                Mapping: "$.changeset"
              - Name: change_time
                SqlType: "TIMESTAMP"
                Mapping: "$.timestamp"
              - Name: lon
                SqlType: "DOUBLE"
                Mapping: "$.lon"
              - Name: lat
                SqlType: "DOUBLE"
                Mapping: "$.lat"
      ApplicationCode: |
        CREATE OR REPLACE STREAM "NodesStream" (
          "node_id" BIGINT,
          "changeset_id" BIGINT,
          "user_id" BIGINT,
          "user_name" VARCHAR(128),
          "lon" DOUBLE,
          "lat" DOUBLE
        );

        CREATE OR REPLACE PUMP "NodesStreamPump" AS INSERT INTO "NodesStream"
          SELECT STREAM
            "feature_id" AS "node_id",
            "changeset_id",
            "user_id",
            "user_name",
            "lon",
            "lat"
          FROM OSC_001
          WHERE "feature" = 'node'
        ;

        CREATE OR REPLACE STREAM "StatsStream" (
          "group_name" VARCHAR(8),
          "ingest_time" TIMESTAMP,
          "client_time" TIMESTAMP,
          "category" VARCHAR(16),
          "item_count" BIGINT
        );
        CREATE OR REPLACE PUMP "StatsPump1" AS INSERT INTO "StatsStream"
          SELECT STREAM
            'Change' AS "group_name",
            STEP("OSC_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("OSC_001"."change_time" BY INTERVAL '60' SECOND) AS "client_time",
            "change" AS "category",
            COUNT(*) AS "item_count"
          FROM "OSC_001"
          GROUP BY
            "change",
            STEP("OSC_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("OSC_001"."change_time" BY INTERVAL '60' SECOND)
         UNION ALL
         SELECT STREAM
            'Feature' AS "group_name",
            STEP("OSC_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("OSC_001"."change_time" BY INTERVAL '60' SECOND) AS "client_time",
            "feature" AS "category",
            COUNT(*) AS "item_count"
          FROM "OSC_001"
          GROUP BY
            "feature",
            STEP("OSC_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("OSC_001"."change_time" BY INTERVAL '60' SECOND)
         ;

  # === "Stats" Output - Write to CloudWatch Metrics ===

  AnalyticsAppStatsOutputRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AnalyticsAppStatsOuputPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowUseKey
                Effect: Allow
                Action:
                 - "kms:GenerateDataKey"
                Resource:
                  - !Ref KmsKeyArn
              - Sid: WriteStatsStream
                Effect: Allow
                Action:
                 - "kinesis:DescribeStream"
                 - "kinesis:PutRecord"
                 - "kinesis:PutRecords"
                Resource:
                  - !GetAtt StatsOutputStream.Arn

  AnalyticsAppStatsOutput:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref SteamingAnalyticsApp
      Output:
        DestinationSchema:
          RecordFormatType: JSON
        KinesisStreamsOutput:
          ResourceARN: !GetAtt 'StatsOutputStream.Arn'
          RoleARN: !GetAtt 'AnalyticsAppStatsOutputRole.Arn'
        Name: StatsStream

  StatsOutputStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1

  StatsOutputEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt 'StatsOutputStream.Arn'
      FunctionName: !Ref 'StatsOutputPublishFunction'
      StartingPosition: LATEST

  StatsOutputPublishFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StatsOutputPublishFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ReadKinesis
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                Resource: !GetAtt StatsOutputStream.Arn
              - Sid: AllowUseKey
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Ref KmsKeyArn
              - Sid: WriteMetrics
                Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  StatsOutputPublishFunction:
    Type: AWS::Lambda::Function
    Properties:
      TracingConfig:
        Mode: Active
      Code: ./code/publish_stats/
      MemorySize: 128
      Handler: publish_stats.lambda_handler
      Role: !GetAtt 'StatsOutputPublishFunctionRole.Arn'
      Timeout: 30
      Runtime: python3.6

  StatsDashboard:
    Type: "AWS::CloudWatch::Dashboard"
    DependsOn: SteamingAnalyticsApp
    Properties:
      DashboardName: !Sub "${AWS::StackName}_Dashboard_${AWS::Region}"
      DashboardBody:
        Fn::Sub: |
          {
            "widgets": [
              {
                "type": "metric",
                "x": 0,
                "y": 3,
                "width": 21,
                "height": 6,
                "properties": {
                  "view": "timeSeries",
                  "stacked": true,
                  "metrics": [
                    [ "OSM/OSC", "create", "Group Name", "Change ", { "period": 300, "color": "#2ca02c" } ],
                    [ ".", "delete", ".", ".", { "period": 300, "color": "#d62728" } ],
                    [ ".", "modify", ".", ".", { "period": 300, "color": "#1f77b4" } ]
                  ],
                  "region": "${AWS::Region}",
                  "period": 300,
                  "title": "Change Type"
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 9,
                "width": 21,
                "height": 6,
                "properties": {
                  "view": "timeSeries",
                  "stacked": false,
                  "metrics": [
                    [ "OSM/OSC", "node", "Group Name", "Feature", { "period": 60 } ],
                    [ ".", "way", ".", ".", { "period": 60 } ],
                    [ ".", "relation", ".", ".", { "period": 60 } ]
                  ],
                  "region": "${AWS::Region}",
                  "period": 300,
                  "title": "Feature Type"
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 3,
                "properties": {
                  "view": "singleValue",
                  "metrics": [
                    [ "OSM/OSC", "create", "Group Name", "Change ", { "stat": "Sum", "period": 86400, "color": "#2ca02c" } ],
                    [ ".", "delete", ".", ".", { "stat": "Sum", "period": 86400, "color": "#d62728" } ],
                    [ ".", "modify", ".", ".", { "stat": "Sum", "period": 86400, "color": "#1f77b4" } ]
                  ],
                  "region": "${AWS::Region}",
                  "period": 300,
                  "title": "Daily Changes"
                }
              }
            ]
          }

  # === "Nodes" Output - Write to ElasticSearch cluster ===
#
#  AnalyticsAppNodesOutputRole:
#    Type: "AWS::IAM::Role"
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: kinesisanalytics.amazonaws.com
#            Action: "sts:AssumeRole"
#      Policies:
#        - PolicyName: AnalyticsAppNodesOutputPolicy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Sid: AllowWriteToFirehose
#                Effect: Allow
#                Action:
#                  - firehose:PutRecord*
#                Resource: !GetAtt 'NodesOutputStream.Arn'
#
#  AnalyticsAppNodesOutput:
#    Type: AWS::KinesisAnalytics::ApplicationOutput
#    Properties:
#      ApplicationName: !Ref SteamingAnalyticsApp
#      Output:
#        DestinationSchema:
#          RecordFormatType: JSON
#        KinesisFirehoseOutput:
#          ResourceARN: !GetAtt 'NodesOutputStream.Arn'
#          RoleARN: !GetAtt 'AnalyticsAppNodesOutputRole.Arn'
#        Name: NodesStream
#
#  NodesOutputStreamDeliveryLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      RetentionInDays: 7
#
#  NodesOutputStreamDeliveryLogStream:
#    Type: AWS::Logs::LogStream
#    Properties:
#      LogGroupName: !Ref NodesOutputStreamDeliveryLogGroup
#
#  NodesOutputStreamDeliveryRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Action: sts:AssumeRole
#            Principal:
#              Service: firehose.amazonaws.com
#            Effect: Allow
#            Condition:
#              StringEquals:
#                sts:ExternalId: !Ref 'AWS::AccountId'
#            Sid: ''
#      Policies:
#        - PolicyName: FirehoseLog
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Sid: AllowWriteCloudWatchLog
#                Effect: Allow
#                Action:
#                  - logs:PutLogEvents
#                Resource:
#                  - !GetAtt NodesOutputStreamDeliveryLogGroup.Arn
#        - PolicyName: FirehoseDelivery
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Sid: AllowWriteToS3
#                Effect: Allow
#                Action:
#                  - s3:AbortMultipartUpload
#                  - s3:GetBucketLocation
#                  - s3:GetObject
#                  - s3:ListBucket
#                  - s3:ListBucketMultipartUploads
#                  - s3:PutObject
#                Resource:
#                  - !Ref BucketArn
#                  - !Join
#                    - /
#                    - - !Ref BucketArn
#                      - '*'
#        - PolicyName: ElasticSearchDelivery
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Sid: AllowWriteToS3
#                Effect: Allow
#                Action:
#                  - es:*
#                  - s3:PutObject
#                Resource:
#                  - !GetAtt NodesSearchDomain.DomainArn
#
#        - PolicyName: AllowUseKey
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Sid: AllowUseKey
#                Effect: Allow
#                Action:
#                  - kms:Encrypt
#                  - kms:Decrypt
#                  - kms:ReEncrypt*
#                  - kms:GenerateDataKey*
#                  - kms:DescribeKey
#                Resource:
#                  - !Ref KmsKeyArn
#              - Sid: AllowAttachmentPersistentResources
#                Effect: Allow
#                Action:
#                  - kms:CreateGrant
#                  - kms:ListGrants
#                  - kms:RevokeGrant
#                Resource:
#                  - !Ref KmsKeyArn
#                Condition:
#                  Bool:
#                    kms:GrantIsForAWSResource: "true"
#
#  NodesOutputStream:
#    Type: AWS::KinesisFirehose::DeliveryStream
#    Properties:
#      ElasticsearchDestinationConfiguration:
#        RoleARN: !GetAtt NodesOutputStreamDeliveryRole.Arn
#        CloudWatchLoggingOptions:
#          Enabled: true
#          LogGroupName: !Ref NodesOutputStreamDeliveryLogGroup
#          LogStreamName: !Ref NodesOutputStreamDeliveryLogStream
#        DomainARN: !GetAtt NodesSearchDomain.DomainArn
#        IndexName: node
#        TypeName: nodechanges
#        IndexRotationPeriod: OneMonth
#        BufferingHints:
#          IntervalInSeconds: 60
#          SizeInMBs: 1
##        ProcessingConfiguration:
#        RetryOptions:
#          DurationInSeconds: 120
#        S3BackupMode: AllDocuments
#        S3Configuration:
#          CompressionFormat: GZIP
#          RoleARN: !GetAtt NodesOutputStreamDeliveryRole.Arn
#          BucketARN: !Ref BucketArn
#          Prefix: !Ref NodesOutputPrefix
#          EncryptionConfiguration:
#            KMSEncryptionConfig:
#              AWSKMSKeyARN: !Ref KmsKeyArn
#          BufferingHints:
#            IntervalInSeconds: 300
#            SizeInMBs: 500
#
#  NodesSearchDomain:
#    Type: "AWS::Elasticsearch::Domain"
#    Properties:
#      ElasticsearchVersion: "5.5"
#      ElasticsearchClusterConfig:
#        InstanceCount: "1"
#        InstanceType: "m3.medium.elasticsearch"
#      EBSOptions:
#        EBSEnabled: true
#        Iops: 0
#        VolumeSize: 100
#        VolumeType: "gp2"
#      AccessPolicies:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              AWS: "*"
#            Action: "es:*"
##            Condition:
##              IpAddress:
##                aws:SourceIp: !Ref ElasticSearchAccessLocation
#            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*"
