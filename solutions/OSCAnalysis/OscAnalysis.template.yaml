AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: OSM change analysis.

Globals:
  Function:
    Runtime: python3.6
    MemorySize: 128
    Timeout: 15
    Tracing: Active
    Policies:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
#    Environment:
#      Variables:


Resources:

  # === Data Storage ===
  StorageBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 90

  # === Osc Data Ingest ===

  OscStatesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "seq"
          AttributeType: N
      KeySchema:
        - AttributeName: "seq"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: ttl

  CheckStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Check OSC state and store in DDB
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
      Handler: check_state.lambda_handler
      CodeUri: ./code/check_state.py
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref OscStatesTable
      Environment:
        Variables:
          OSC_TABLE_NAME: !Ref OscStatesTable
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)

  # === Ingest Firehose Stream ===

  IngestStreamDeliveryRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Policies:
        - PolicyName: FirehoseDeliveryPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowWriteToS3
                Effect: Allow
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt StorageBucket.Arn
                  - !Join
                    - "/"
                    - - !GetAtt StorageBucket.Arn
                      - "*"

  IngestStream:
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt StorageBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        CompressionFormat: GZIP
        Prefix: "ingest/osc_minute/"
        RoleARN: !GetAtt IngestStreamDeliveryRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt TransformChangeFunction.Arn
                - ParameterName: NumberOfRetries
                  ParameterValue: 3
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt IngestStreamTransformInvokeRole.Arn
                - ParameterName: BufferSizeInMBs
                  ParameterValue: 3
                - ParameterName: BufferIntervalInSeconds
                  ParameterValue: 60
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt StorageBucket.Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 50
          CompressionFormat: GZIP
          Prefix: "ingest/osc_minute_backup/"
          RoleARN: !GetAtt IngestStreamDeliveryRole.Arn

  DownloadOscFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Download OSC data and split into change fragments
        then write to Firehose
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
      Handler: download_osc.lambda_handler
      CodeUri: ./code/download_osc.py
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecord*
            Resource: !GetAtt IngestStream.Arn
      Environment:
        Variables:
          FIREHOSE_STREAM_NAME: !Ref IngestStream
      Events:
        Timer:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt OscStatesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1

  IngestStreamTransformInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowWriteToS3
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt TransformChangeFunction.Arn

  TransformChangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Transform XML changes to JSON and split into feature records
      Runtime: python3.6
      MemorySize: 256
      Timeout: 60
      Handler: transform_change.lambda_handler
      CodeUri: ./code/transform_change.py
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  # === Streaming Analytics ===

  KinesisAnalyticsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: KinesisAnalyticsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ReadInputFirehose
                Effect: Allow
                Action:
                 - "firehose:DescribeDeliveryStream"
                 - "firehose:Get*"
                Resource:
                  - !GetAtt IngestStream.Arn
              - Sid: WriteOutputKinesis
                Effect: Allow
                Action:
                 - "kinesis:DescribeStream"
                 - "kinesis:PutRecord"
                 - "kinesis:PutRecords"
                Resource:
                  - !GetAtt AnalyticsOutputStream.Arn

  SteamAnalyticsApp:
    Type: "AWS::KinesisAnalytics::Application"
    Properties:
      Inputs:
        - NamePrefix: "osc"
          KinesisFirehoseInput:
            ResourceARN: !GetAtt IngestStream.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn
          InputSchema:
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordColumns:
              - Name: change
                SqlType: "VARCHAR(16)"
                Mapping: "$.change"
              - Name: feature
                SqlType: "VARCHAR(16)"
                Mapping: "$.feature"
              - Name: id
                SqlType: "BIGINT"
                Mapping: "$.id"
              - Name: user_id
                SqlType: "BIGINT"
                Mapping: "$.uid"
              - Name: user_name
                SqlType: "VARCHAR(128)"
                Mapping: "$.user"
              - Name: changeset
                SqlType: "BIGINT"
                Mapping: "$.changeset"
              - Name: change_time
                SqlType: "TIMESTAMP"
                Mapping: "$.timestamp"
      ApplicationCode: |
        CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" (
          GROUP_NAME VARCHAR(8),
          INGEST_TIME TIMESTAMP,
          CLIENT_TIME TIMESTAMP,
          CATEGORY VARCHAR(16),
          ITEM_COUNT BIGINT
        );
        CREATE OR REPLACE PUMP "STREAM_PUMP1" AS INSERT INTO "DESTINATION_SQL_STREAM"
          SELECT STREAM
            'Change' AS GROUP_NAME,
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND) AS CLIENT_TIME,
            "change" AS CATEGORY,
            COUNT(*) AS ITEM_COUNT
          FROM "osc_001"
          GROUP BY
            "change",
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND)
         UNION ALL
         SELECT STREAM
            'Feature' AS GROUP_NAME,
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND) AS CLIENT_TIME,
            "feature" AS CATEGORY,
            COUNT(*) AS ITEM_COUNT
          FROM "osc_001"
          GROUP BY
            "feature",
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND)
          ;

  # === Output ===

  AnalyticsOutputStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1

  AnalyticsAppOutput:
    Type: "AWS::KinesisAnalytics::ApplicationOutput"
    Properties:
      ApplicationName: !Ref SteamAnalyticsApp
      Output:
        Name: "DESTINATION_SQL_STREAM"
        DestinationSchema:
          RecordFormatType: "JSON"
        KinesisStreamsOutput:
          ResourceARN: !GetAtt AnalyticsOutputStream.Arn
          RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  PublishResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: publish_result.lambda_handler
      Runtime: python3.6
      CodeUri: ./code/publish_result.py
      MemorySize: 128
      Timeout: 30
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
      Events:
        Timer:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AnalyticsOutputStream.Arn
            StartingPosition: LATEST
            BatchSize: 10

  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Sub "${AWS::StackName}_Dashboard_${AWS::Region}"
      DashboardBody:
        Fn::Sub: |
          {
              "widgets": [
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 3,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": true,
                          "metrics": [
                              [ "OSM/OSC", "create", "Group Name", "Change ", { "period": 300, "color": "#2ca02c" } ],
                              [ ".", "delete", ".", ".", { "period": 300, "color": "#d62728" } ],
                              [ ".", "modify", ".", ".", { "period": 300, "color": "#1f77b4" } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 300,
                          "title": "Change Type"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 9,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ "OSM/OSC", "node", "Group Name", "Feature", { "period": 60 } ],
                              [ ".", "way", ".", ".", { "period": 60 } ],
                              [ ".", "relation", ".", ".", { "period": 60 } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 300,
                          "title": "Feature Type"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 0,
                      "width": 21,
                      "height": 3,
                      "properties": {
                          "view": "singleValue",
                          "metrics": [
                              [ "OSM/OSC", "create", "Group Name", "Change ", { "stat": "Sum", "period": 86400, "color": "#2ca02c" } ],
                              [ ".", "delete", ".", ".", { "stat": "Sum", "period": 86400, "color": "#d62728" } ],
                              [ ".", "modify", ".", ".", { "stat": "Sum", "period": 86400, "color": "#1f77b4" } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 300,
                          "title": "Daily Changes"
                      }
                  }
              ]
          }
