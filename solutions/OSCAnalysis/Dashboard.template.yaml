AWSTemplateFormatVersion: '2010-09-09'
Description: Realtime dashboard
Transform: 'AWS::Serverless-2016-10-31'

Parameters:

  IngestStack:
    Type: String
    Description: Ingest stack name

Resources:

  AnalyticsOutputStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1

  KinesisAnalyticsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: KinesisAnalyticsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ReadInputFirehose
                Effect: Allow
                Action:
                 - "firehose:DescribeDeliveryStream"
                 - "firehose:Get*"
                Resource:
                  - Fn::ImportValue:
                      !Sub ${IngestStack}:IngestStreamArn
              - Sid: WriteOutputKinesis
                Effect: Allow
                Action:
                 - "kinesis:DescribeStream"
                 - "kinesis:PutRecord"
                 - "kinesis:PutRecords"
                Resource:
                  - !GetAtt AnalyticsOutputStream.Arn

  SteamAnalyticsApp:
    Type: "AWS::KinesisAnalytics::Application"
    Properties:
      Inputs:
        - NamePrefix: "osc"
          KinesisFirehoseInput:
            ResourceARN:
              Fn::ImportValue:
                !Sub ${IngestStack}:IngestStreamArn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn
          InputSchema:
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordColumns:
              - Name: change
                SqlType: "VARCHAR(16)"
                Mapping: "$.change"
              - Name: feature
                SqlType: "VARCHAR(16)"
                Mapping: "$.feature"
              - Name: id
                SqlType: "BIGINT"
                Mapping: "$.id"
              - Name: user_id
                SqlType: "BIGINT"
                Mapping: "$.uid"
              - Name: user_name
                SqlType: "VARCHAR(128)"
                Mapping: "$.user"
              - Name: changeset
                SqlType: "BIGINT"
                Mapping: "$.changeset"
              - Name: change_time
                SqlType: "TIMESTAMP"
                Mapping: "$.timestamp"
      ApplicationCode: |
        CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" (
          GROUP_NAME VARCHAR(8),
          INGEST_TIME TIMESTAMP,
          CLIENT_TIME TIMESTAMP,
          CATEGORY VARCHAR(16),
          ITEM_COUNT BIGINT
        );
        CREATE OR REPLACE PUMP "STREAM_PUMP1" AS INSERT INTO "DESTINATION_SQL_STREAM"
          SELECT STREAM
            'Change' AS GROUP_NAME,
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND) AS CLIENT_TIME,
            "change" AS CATEGORY,
            COUNT(*) AS ITEM_COUNT
          FROM "osc_001"
          GROUP BY
            "change",
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND)
         UNION ALL
         SELECT STREAM
            'Feature' AS GROUP_NAME,
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND) AS CLIENT_TIME,
            "feature" AS CATEGORY,
            COUNT(*) AS ITEM_COUNT
          FROM "osc_001"
          GROUP BY
            "feature",
            STEP("osc_001".ROWTIME BY INTERVAL '60' SECOND),
            STEP("osc_001"."change_time" BY INTERVAL '60' SECOND)
          ;

  StartAnalyticsAppCustomResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
     - AnalyticsAppOutput
    Properties:
      ServiceToken: !GetAtt 'StartAnalyticsAppFunction.Arn'
      ApplicationName: !Ref SteamAnalyticsApp

  StartAnalyticsAppFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess

  StartAnalyticsAppFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt StartAnalyticsAppFunctionRole.Arn
      Code:
        ZipFile: >

          import cfnresponse

          import boto3

          def lambda_handler(event, context):
              app_name = event['ResourceProperties']['ApplicationName']

              if event['RequestType'] == 'Create':
                  try:
                      client = boto3.client('kinesisanalytics')
                      response = client.describe_application(ApplicationName=app_name)
                      input_id = response['ApplicationDetail']['InputDescriptions'][0]['InputId']
                      print('Starting application', app_name, input_id)
                      client.start_application(
                          ApplicationName=app_name,
                          InputConfigurations=[
                              {
                                  'Id': input_id,
                                  'InputStartingPositionConfiguration': {
                                      'InputStartingPosition': 'NOW'
                                  }
                              },
                          ]
                      )
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except ClientError as e:
                      print(e)
                      return cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})


  # === Result Publish ===

  AnalyticsAppOutput:
    Type: "AWS::KinesisAnalytics::ApplicationOutput"
    Properties:
      ApplicationName: !Ref SteamAnalyticsApp
      Output:
        Name: "DESTINATION_SQL_STREAM"
        DestinationSchema:
          RecordFormatType: "JSON"
        KinesisStreamsOutput:
          ResourceARN: !GetAtt AnalyticsOutputStream.Arn
          RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  PublishResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: publish_metric.lambda_handler
      Runtime: python3.6
      CodeUri: ./lambdas/publish_metric/
      MemorySize: 128
      Timeout: 60
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
      Events:
        Timer:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AnalyticsOutputStream.Arn
            StartingPosition: LATEST
            BatchSize: 10

  # === Dashboard  ===

  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Sub "${AWS::StackName}_Dashboard_${AWS::Region}"
      DashboardBody:
        Fn::Sub: |
          {
              "widgets": [
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 3,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": true,
                          "metrics": [
                              [ "OSM/OSC", "create", "Group Name", "Change ", { "period": 300, "color": "#2ca02c" } ],
                              [ ".", "delete", ".", ".", { "period": 300, "color": "#d62728" } ],
                              [ ".", "modify", ".", ".", { "period": 300, "color": "#1f77b4" } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 300,
                          "title": "Change Type"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 9,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ "OSM/OSC", "node", "Group Name", "Feature", { "period": 60 } ],
                              [ ".", "way", ".", ".", { "period": 60 } ],
                              [ ".", "relation", ".", ".", { "period": 60 } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 300,
                          "title": "Feature Type"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 0,
                      "width": 21,
                      "height": 3,
                      "properties": {
                          "view": "singleValue",
                          "metrics": [
                              [ "OSM/OSC", "create", "Group Name", "Change ", { "stat": "Sum", "period": 86400, "color": "#2ca02c" } ],
                              [ ".", "delete", ".", ".", { "stat": "Sum", "period": 86400, "color": "#d62728" } ],
                              [ ".", "modify", ".", ".", { "stat": "Sum", "period": 86400, "color": "#1f77b4" } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 300,
                          "title": "Daily Changes"
                      }
                  }
              ]
          }

Outputs:
  Dashboard:
    Description: Dashboard
    Value: !Ref Dashboard
